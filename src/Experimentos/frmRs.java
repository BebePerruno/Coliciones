/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Experimentos;

import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rafae
 */
public class frmRs extends javax.swing.JFrame {

    /**
     * Creates new form frmSprite3
     */
    public frmRs() {
        initComponents();
        this.setBounds(100, 100,772, 452);
        this.jTable1.setModel(ModeloTabla());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(772, 452));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(32, 20, 510, 290));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public interface RsAncestro<modelo>{
        public DefaultTableModel ModeloTabla();
        public String []GetVector();
        public String[][] GetMatriz();
        public boolean existe();
        public void add(modelo nuevo_valor);
        public modelo Obtener(modelo id);
        public modelo Obtener(int id);
        public boolean existe(modelo objeto_a_comprobar);
    }
    
    public class Rs{
        public int []m=new int[5];
        
        private int id=0;
        public boolean existe(){
            for(int i=0;i<5;i++){
                if(m[i]==0){
                    id=i;
                    return false;
                }
            }
            return true;
        }
        
        public void add(int nuevo_valor){
            if(existe()==false){
                m[id]=nuevo_valor;
            }
        }
    }
    
    public class Rs2{
        public ArrayList<String> datos=new ArrayList<String>();
        
        public void add(String txt){
            if(existe(txt)==false){
                System.out.println(txt);
                datos.add(txt);
            }
        }
        
        private int id=0;
        public boolean existe(String txt){
            try{
                for(int i=0;i<datos.size();i++){
                    if(datos.get(i)!=null){
                        if(datos.get(i).equalsIgnoreCase(txt)==true){
                            id=i;
                            return true;
                        }else{
                            return false;
                        }
                    }
                }
                return false;
            }catch(Exception e){
                
            }
            return false;
        }
        
        public String Obtener(int id){
            return datos.get(id);
        }
    }
    
    public class Hormiga{
        public static final String []ETIQUETAS={"Nombre", "Color","Velocidad"};
        public Hormiga(String nuevo_nombre, String nuevo_color, int nueva_velocidad){
            velocidad=nueva_velocidad;
            nombre=nuevo_nombre;
            color=nuevo_color;
        }
        public int velocidad=0;
        public String nombre="";
        public String color="";
        
        @Override
        public String toString(){
            return "Nombre " + nombre + ", color " + color + ", velocidad " + velocidad;
        }
        
    }
    
    public class Rs3 implements RsAncestro<Hormiga>{

        private int id=0;
        private Hormiga hormiga;
        public ArrayList<Hormiga> hormigas=new ArrayList<Hormiga>();
        
        @Override
        public boolean existe() {
//            
            return false;
        }

        @Override
        public void add(Hormiga nuevo_valor) {
            if(existe(nuevo_valor)==false){
                System.out.println(nuevo_valor.toString());
                hormigas.add(nuevo_valor);
            }
        }

        @Override
        public Hormiga Obtener(Hormiga id) {
            return new Hormiga("","",0);
        }

        @Override
        public boolean existe(Hormiga objeto_a_comprobar) {
            try{
                for(int i=0;i<hormigas.size();i++){
                    if(hormigas.get(i)!=null){
                        if(hormigas.get(i).nombre.equalsIgnoreCase(objeto_a_comprobar.nombre)==true){
                            id=i;
                            return true;
                        }else{
                            return false;
                        }
                    }
                }
                return false;
            }catch(Exception e){
                
            }
            return false;
        }

        @Override
        public Hormiga Obtener(int id) {
            if(hormigas.isEmpty()==false){
                return hormigas.get(id);
            }
            return new Hormiga("","",0);
        }

        @Override
        public String[] GetVector() {
            //        EventoLeer(modelos);
            String []MatrizLocal=new String [hormigas.size()];
            try{
                for(int i=0;i<hormigas.size();i++){
                    MatrizLocal[i]=hormigas.get(i).nombre;
                }
            }catch(Exception e){
            }
            return MatrizLocal;
        }

        @Override
        public String[][] GetMatriz() {
            String[][] registroJugadores = new String[hormigas.size()][Hormiga.ETIQUETAS.length];
        try{
//                mJugadores = es.leerlo();
        }catch(Exception e ){
           System.out.println("Error al leerlo.") ;
        }
        try{
            for (int i = 0; i <=10; i++) {
                if(hormigas.get(i)!=null){
                    System.out.println("Length=" + hormigas.size() +"\nid="+i + "\n"+hormigas.get(i).toString());
                    registroJugadores[i][0] = hormigas.get(i).nombre;
                    registroJugadores[i][1] = hormigas.get(i).color;
                    registroJugadores[i][2] = hormigas.get(i).velocidad + "";

                }else{
                    break;
                }
            }
        }catch(Exception e){}
        return registroJugadores;
        }

        @Override
        public DefaultTableModel ModeloTabla() {
            return new DefaultTableModel(GetMatriz(),Hormiga.ETIQUETAS);
        }
    }
    
    private DefaultTableModel ModeloTabla(){
        Rs3 rs=new Rs3();
        Hormiga hormiga=new Hormiga("A","verde",12);
        
        rs.add(hormiga);
        hormiga=new Hormiga("B","Rojo",44);
        rs.add(hormiga);
        hormiga=new Hormiga("R","Turqueza",100);
        rs.add(hormiga);
        hormiga=new Hormiga("kit","dorado",19);
        rs.add(hormiga);
        hormiga=new Hormiga("Xinia","negrita",45);
        rs.add(hormiga);
        return rs.ModeloTabla();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmRs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmRs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmRs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmRs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new frmRs().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
